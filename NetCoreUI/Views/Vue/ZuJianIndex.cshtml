
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>ZuJianIndex</title>
</head>
<body>
    <div id="app-7">
        <ol>
            <!--
              现在我们为每个 todo-item 提供 todo 对象
              todo 对象是变量，即其内容可以是动态的。
              我们也需要为每个组件提供一个“key”，稍后再
              作详细解释。
            -->
            <todo-item v-for="item in groceryList"
                       v-bind:todo="item"
                       v-bind:key="item.id">
            </todo-item>
        </ol>
    </div>
    <div id="str">
        <ss></ss>
        @*<child message="hello1!"></child>*@
        <child my-message="hello2!"></child>
    </div>
    <div id="prop-example-2">
        <input v-model="parentMsg">
        <br>
        <child v-bind:my-message="parentMsg"></child>
    </div>
    <hr />
    <div>局部注册</div>
    <div id="qwe">
        <myqw-component v-bind:my-Message="9999">456</myqw-component>
    </div>
    <hr />
    <div id="ert">
        <child my-message="清明"></child>
    </div>
    <hr />
    <div>组件校验</div>
    <div id="aaa">
        <input v-model="parentMsg">
        <my-component v-bind:num="8888" v-bind:msg="parentMsg">456</my-component>
    </div>
</body>
</html>
<script src="~/js/jquery-1.91.min.js"></script>
<script src="~/js/vue.js" asp-append-version="true"></script>
@*<script src="https://cdn.jsdelivr.net/npm/vue" ></script>*@
<script>
    //注册一个全局组件
    // 定义名为 todo-item 的新组件
    Vue.component('todo-item', {
        // todo-item 组件现在接受一个
        // "prop"，类似于一个自定义特性。
        // 这个 prop 名为 todo。
        props: ['todo'],
        template: '<li>{{ todo.text }}</li>'
    })
    var app7 = new Vue({
        el: '#app-7',
        data: {
            groceryList: [
                { id: 0, text: '蔬菜' },
                { id: 1, text: '奶酪' },
                { id: 2, text: '随便其它什么人吃的东西' }
            ]
        },
        created: function () {//app7示例创建后触发
            // `this` 指向 vm 实例
            console.log('data is: ' + this.groceryList)
        }
    })
    Vue.component('ss', {
        template:'<P>你好</P>'
    })
    Vue.component('child', {
        // 在 JavaScript 中使用 camelCase
        props: ['myMessage'],
        template: `<div>
                        <div><span>{{ myMessage }}</span></div>
                        <div><span>123{{ myMessage }}</span></div>
                    </div>
                   `
    })
    var app8 = new Vue({
        el: '#str'
    });
    //new Vue({
    //    el: '#prop-example-2',
    //    data: {
    //        parentMsg: 'Message from parent'
    //    }
    //})
    var app9 = new Vue({
        el: '#ert'
    });
</script>
<script>
    //------------------------组件局部注册----------------------------
    var zujian = {
        props: ['myMessage'],
        template: '<div>{{ myMessage+1 }}</div>'
    };
    //局部注册只能在#qwe中使用
    new Vue({
        el: '#qwe',
        // ...
        components: {            
            // <my-component> 将只在父组件模板中可用
            'myqw-component': zujian//myqw：组件标签名，可以按规则任意命名
        }
    });
</script>
<script>
    // //------------------------组件校验---------------------------
    var verify = {
        props: {
            'num': {
                type: Number,//必须是数字
                default: 1000,//默认值
            },
            'msg': {
                type: Number,//必须是字符串
                required: true//不能为null
            },
            'message': {
                type: Object,
                default: function () {
                    return { message: 'hello' }
                }
            }
        },
        template: `<div>
                    <P>{{ num+1 }}</p>
                    <P>{{ msg+1 }}</p>
                    <P>{{ message }}</p>
                  </div>`

                };
    new Vue({
        el: '#aaa',
        // ...
        components: {
            // <my-component> 将只在父组件模板中可用
            'my-component': verify//组件标签名，可以按规则任意命名
        },
        data: {
            parentMsg: 2222
        }


    });
</script>